package assignment2.FileSharingApp;


/**
* FileSharingApp/FileSharingPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from FileSharing.idl
* Thursday, February 22, 2024 2:40:34 o'clock AM EST
*/


// Interface for P2P file sharing services
public abstract class FileSharingPOA extends org.omg.PortableServer.Servant
 implements FileSharingOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("registerFile", new java.lang.Integer (0));
    _methods.put ("removeFile", new java.lang.Integer (1));
    _methods.put ("searchFile", new java.lang.Integer (2));
    _methods.put ("getFileOwner", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Registers a file with the server to be shared with others
       case 0:  // FileSharingApp/FileSharing/registerFile
       {
         String filename = in.read_string ();
         String clientID = in.read_string ();
         String clientAddress = in.read_string ();
         String clientPort = in.read_string ();
         this.registerFile (filename, clientID, clientAddress, clientPort);
         out = $rh.createReply();
         break;
       }


  // Removes a file from the list of shared files
       case 1:  // FileSharingApp/FileSharing/removeFile
       {
         String filename = in.read_string ();
         String clientID = in.read_string ();
         this.removeFile (filename, clientID);
         out = $rh.createReply();
         break;
       }


  // Searches for a file by name and returns a list of files matching the query
       case 2:  // FileSharingApp/FileSharing/searchFile
       {
         String filename = in.read_string ();
         String $result[] = null;
         $result = this.searchFile (filename);
         out = $rh.createReply();
         assignment2.FileSharingApp.FileSharingPackage.FileInfoListHelper.write (out, $result);
         break;
       }


  // Retrieves the owner information for a specific file
       case 3:  // FileSharingApp/FileSharing/getFileOwner
       {
         String filename = in.read_string ();
         String $result = null;
         $result = this.getFileOwner (filename);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FileSharingApp/FileSharing:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public FileSharing _this() 
  {
    return FileSharingHelper.narrow(
    super._this_object());
  }

  public FileSharing _this(org.omg.CORBA.ORB orb) 
  {
    return FileSharingHelper.narrow(
    super._this_object(orb));
  }


} // class FileSharingPOA
